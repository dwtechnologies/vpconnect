
Description: "VPConnect VPN for {{.FriendlyName}}"

Parameters:

# Always use the default value so we always get the latest version of the AMI.
  AmiImageId:
    Description: "AMI Image ID"
    Type: "AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>"
    Default: "/aws/service/ecs/optimized-ami/amazon-linux/recommended/image_id"


Resources:

########################################
# EC2 SECURITY GROUP NETWORK INTERFACE #
########################################
# Only used for IPSec traffic from the
# Primary and Secondary remote IP.
# Manual ingress can be added by editing
# the sg-ingress.yaml file. This much 
# include the local subnets/sgs that should be
# able to send traffic through the tunnel.
  VpnSecurityGroupNetworkInterface:
    Type: "AWS::EC2::SecurityGroup"
    Properties:
      GroupName: "vpconnect-ni-{{.Name}}"
      GroupDescription: "vpconnect-ni-{{.Name}}"
      VpcId: "{{.Network.VpcId}}"
      SecurityGroupIngress:
        # Automatic Ingress rules
        {{.AutoIngressString}}
        {{.ManualIngressString}}

      SecurityGroupEgress:
        - Description: "Allow all traffic"
          IpProtocol: "-1"
          CidrIp: "0.0.0.0/0"


###########################################
# EC2 SECURITY GROUP MANAGEMENT INTERFACE #
###########################################
# Only used for SSH access from the management
# security group and internal AWS monitoring.
  VpnSecurityGroupPrimary:
    Type: "AWS::EC2::SecurityGroup"
    Properties:
      GroupName: "vpconnect-primary-{{.Name}}"
      GroupDescription: "vpconnect-primary-{{.Name}}"
      VpcId: "{{.Network.VpcId}}"
      SecurityGroupEgress:
        - Description: "Allow all traffic"
          IpProtocol: "-1"
          CidrIp: "0.0.0.0/0"


###############
# ECS CLUSTER #
###############
# We need to use one ECS cluster per service, this is due
# to we need the service to be started on a specific ec2
# that has the right ENI and EIP attached to it.
  VpnEcsCluster:
    Type: "AWS::ECS::Cluster"
    Properties:
      ClusterName: "vpconnect-{{.Name}}"


#####################
# AUTOSCALING GROUP #
#####################
  VpnEcsAutoScalingGroup:
    Type: "AWS::AutoScaling::AutoScalingGroup"
    Properties:
      AutoScalingGroupName: "vpconnect-{{.Name}}"
      HealthCheckType: "EC2"
      LaunchConfigurationName: !Ref "VpnLaunchConfiguration"
      MinSize: "1"
      MaxSize: "1"
      VPCZoneIdentifier:
        - "{{.Network.PrivateSubnetId}}"
      Tags:
        - Key: "Name"
          Value: "vpconnect-{{.Name}}"
          PropagateAtLaunch: true


########################
# LAUNCH CONFIGURATION #
########################
# Commands being run on the ec2 instance on creation / update.
# - Deattach the ENI if it's currently attached to an other ec2 instance.
# - Attach the ENI instance if it's not already attached to the current ec2 instance.
# - Assosciate EIP to the newly attached ENI (And sleep 10 seconds so that EIP is attached).
# - Change default network-dev to eth1 (the newly attached ENI).
# - Add ec2 instance to the ECS cluster.
# - Enable IP Forward in the kernel.
  VpnLaunchConfiguration:
    Type: "AWS::AutoScaling::LaunchConfiguration"
    DependsOn:
      - "VpnInstanceProfile"
      - "VpnElasticIp"
      - "VpnElasticNetworkInterface"
      - "VpnLogGroupDmseg"
      - "VpnLogGroupMessages"
      - "VpnLogGroupDocker"
      - "VpnLogGroupEcsInit"
      - "VpnLogGroupEcsAgent"
      - "VpnLogGroupEcsAudit"
      - "VpnLogGroupIptables"
      - "VpnLogGroupCharon"
      - "VpnLogGroupVpconnect"
    Properties:
      IamInstanceProfile: !Ref "VpnInstanceProfile"
      ImageId: !Ref "AmiImageId"
      InstanceType: "{{.Ecs.InstanceType}}"
      KeyName: "{{.Ecs.SshKeyName}}"
      SecurityGroups:
        - !Ref "VpnSecurityGroupPrimary"
      UserData:
        Fn::Base64:
          !Sub |
            #!/bin/bash -xe
            yum update -y
            yum install -y aws-cfn-bootstrap
            /opt/aws/bin/cfn-init -v --region ${AWS::Region} --stack ${AWS::StackName} --resource VpnLaunchConfiguration
            /opt/aws/bin/cfn-signal -e $? --region ${AWS::Region} --stack ${AWS::StackName} --resource VpnEcsAutoScalingGroup

    Metadata:
      AWS::CloudFormation::Init:
        config:

          packages:
            yum:
              ecs-init: []
              awslogs: []
              aws-cli: []
              unzip: []

          files:
            /etc/rsyslog.d/10-iptables.conf:
              content: !Sub |
                :msg, contains, "[ACCEPT:INPUT]" /var/log/iptables.log
                :msg, contains, "[ACCEPT:FORWARD]" /var/log/iptables.log
                \& ~

            /etc/cfn/cfn-hup.conf:
              content: !Sub |
                [main]
                stack=${AWS::StackId}
                region=${AWS::Region}

            /etc/cfn/hooks.d/cfn-auto-reloader.conf:
              content: !Sub |
                [cfn-auto-reloader-hook]
                triggers=post.update
                path=Resources.VpnLaunchConfiguration.Metadata.AWS::CloudFormation::Init
                action=/opt/aws/bin/cfn-init -v --stack ${AWS::StackName} --resource VpnLaunchConfiguration --region ${AWS::Region}
                runas=root

            /etc/awslogs/awscli.conf:
              content: !Sub |
                [plugins]
                cwlogs = cwlogs
                [default]
                region = ${AWS::Region}

            /etc/awslogs/awslogs.conf:
              content: !Sub |
                [general]
                state_file = /var/lib/awslogs/agent-state

                [/var/log/secure]
                file = /var/log/secure
                log_group_name = ${VpnLogGroupSecure}
                log_stream_name = {instance_id}

                [/var/log/dmesg]
                file = /var/log/dmesg
                log_group_name = ${VpnLogGroupDmseg}
                log_stream_name = {instance_id}

                [/var/log/messages]
                file = /var/log/messages
                log_group_name = ${VpnLogGroupMessages}
                log_stream_name = {instance_id}
                datetime_format = %b %d %H:%M:%S

                [/var/log/docker]
                file = /var/log/docker
                log_group_name = ${VpnLogGroupDocker}
                log_stream_name = {instance_id}
                datetime_format = time="%Y-%m-%dT%H:%M:%S.%f"

                [/var/log/ecs/ecs-init.log]
                file = /var/log/ecs/ecs-init.log.*
                log_group_name = ${VpnLogGroupEcsInit}
                log_stream_name = {instance_id}
                datetime_format = %Y-%m-%dT%H:%M:%SZ

                [/var/log/ecs/ecs-agent.log]
                file = /var/log/ecs/ecs-agent.log.*
                log_group_name = ${VpnLogGroupEcsAgent}
                log_stream_name = {instance_id}
                datetime_format = %Y-%m-%dT%H:%M:%SZ

                [/var/log/ecs/audit.log]
                file = /var/log/ecs/audit.log.*
                log_group_name = ${VpnLogGroupEcsAudit}
                log_stream_name = {instance_id}
                datetime_format = %Y-%m-%dT%H:%M:%SZ

                [/var/log/iptables.log]
                file = /var/log/iptables.log
                log_group_name = ${VpnLogGroupIptables}
                log_stream_name = {instance_id}
                datetime_format = %b %d %H:%M:%S

                [/var/log/vpconnect-logs/charon.log]
                file = /var/log/vpconnect-logs/charon.log
                log_group_name = ${VpnLogGroupCharon}
                log_stream_name = {instance_id}
                datetime_format = %Y-%m-%d %H:%M:%S

          commands:
            01_install_ssm_agent:
              command: !Sub "cd /var/tmp/ && curl -O https://s3.${AWS::Region}.${AWS::URLSuffix}/amazon-ssm-${AWS::Region}/latest/linux_amd64/amazon-ssm-agent.rpm && rpm -U amazon-ssm-agent.rpm"

            02_install_cloudwatchagent:
              command: !Sub "cd /var/tmp/ && curl -O https://s3.${AWS::Region}.${AWS::URLSuffix}/amazoncloudwatch-agent-${AWS::Region}/amazon_linux/amd64/latest/amazon-cloudwatch-agent.rpm && rpm -U amazon-cloudwatch-agent.rpm"

            03_start_cloudwatchagent:
              command: "/opt/aws/amazon-cloudwatch-agent/bin/amazon-cloudwatch-agent-ctl -a fetch-config -m ec2 -c ssm:vpconnect-{{.Name}}-cwAgentConf -s"

            04_detach_eni:
              command: !Sub "aws ec2 detach-network-interface --region ${AWS::Region} --attachment-id $(aws ec2 describe-network-interface-attribute --region ${AWS::Region} --network-interface-id ${VpnElasticNetworkInterface} --attribute attachment --query Attachment.AttachmentId --output text)"
              test: !Sub 'test $(sh -c "if [ "$(aws ec2 describe-network-interface-attribute --region ${AWS::Region} --network-interface-id ${VpnElasticNetworkInterface} --attribute attachment --query Attachment.InstanceId --output text)" == "None" ] || [ "$(aws ec2 describe-network-interface-attribute --region ${AWS::Region} --network-interface-id ${VpnElasticNetworkInterface} --attribute attachment --query Attachment.InstanceId --output text)" == "$(curl http://169.254.169.254/latest/meta-data/instance-id)" ]; then echo \"no\"; else echo \"yes\"; fi") = yes'

            05_attach_eni:
              command: !Sub "aws ec2 attach-network-interface --region ${AWS::Region} --network-interface-id ${VpnElasticNetworkInterface} --instance-id $(curl http://169.254.169.254/latest/meta-data/instance-id) --device-index 1"
              test: !Sub "test ! $(aws ec2 describe-network-interface-attribute --region ${AWS::Region} --network-interface-id ${VpnElasticNetworkInterface} --attribute attachment --query Attachment.InstanceId --output text) = $(curl http://169.254.169.254/latest/meta-data/instance-id)"

            06_associate_eip:
              command: !Sub
                - "aws ec2 associate-address --region ${AWS::Region} --allocation-id ${AID} --network-interface-id ${VpnElasticNetworkInterface}"
                - { AID: !GetAtt "VpnElasticIp.AllocationId" }

            07_enable_ip_forward:
              command: "iptables -P INPUT DROP && iptables -P FORWARD DROP && sysctl -w net.ipv4.ip_forward=1"

            08_add_instance_to_cluster:
              command: !Sub "echo ECS_CLUSTER=${VpnEcsCluster} >> /etc/ecs/ecs.config"
              test: !Sub "test ! $(cat /etc/ecs/ecs.config | grep -c ECS_CLUSTER=${VpnEcsCluster}) -gt 0"

            09_change_default_dev_to_eth1:
              command: "echo GATEWAYDEV=eth1 >> /etc/sysconfig/network && reboot"
              test: "test ! $(cat /etc/sysconfig/network | grep -c GATEWAYDEV=eth1) -gt 0"

          services:
            sysvinit:
              cfn-hup:
                enabled: true
                ensureRunning: true
                files:
                  - "/etc/cfn/cfn-hup.conf"
                  - "/etc/cfn/hooks.d/cfn-auto-reloader.conf"

              awslogs:
                enabled: true
                ensureRunning: true
                files:
                  - "/etc/awslogs/awslogs.conf"
                  - "/etc/awslogs/awscli.conf"


#######################################
# IAM INSTANCE PROFILE & ROLE FOR EC2 #
#######################################
  VpnInstanceProfile:
    Type: "AWS::IAM::InstanceProfile"
    DependsOn:
      - "VpnEc2IamRole"
    Properties: 
      Path: "/"
      Roles:
        - !Ref "VpnEc2IamRole"
      InstanceProfileName: "vpconnect-{{.Name}}"

  VpnEc2IamRole:
    Type: "AWS::IAM::Role"
    Properties:
      RoleName: "vpconnect-{{.Name}}"
      ManagedPolicyArns:
        - !Sub "arn:${AWS::Partition}:iam::aws:policy/service-role/AmazonEC2RoleforSSM"
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement: 
          - Effect: "Allow"
            Principal: 
              Service: 
                - !Sub "ec2.${AWS::URLSuffix}"
            Action: 
              - "sts:AssumeRole"

      Path: "/"
      Policies:
        - PolicyName: "ecs-service"
          PolicyDocument:
            Statement:
              - Effect: "Allow"
                Action:
                  - "ecs:CreateCluster"
                  - "ecs:RegisterContainerInstance"
                  - "ecs:DeregisterContainerInstance"
                  - "ecs:DiscoverPollEndpoint"
                  - "ecs:Submit*"
                  - "ecs:Poll"
                Resource: "*"

        - PolicyName: "cloudwatchalarms-service"
          PolicyDocument:
            Statement:
              - Effect: "Allow"
                Action:
                  - "cloudwatch:PutMetricData"
                  - "cloudwatch:GetMetricStatistics"
                  - "cloudwatch:ListMetrics"
                  - "ec2:DescribeTags"
                Resource: "*"

        - PolicyName: "ecr-service"
          PolicyDocument:
            Statement:
              - Effect: "Allow"
                Action:
                  - "ecr:GetDownloadUrlForLayer"
                  - "ecr:BatchGetImage"
                  - "ecr:BatchCheckLayerAvailability"
                  - "ecr:GetAuthorizationToken"
                Resource: "*"

        - PolicyName: "ssm-access-cw-agent-config"
          PolicyDocument:
            Statement:
              - Effect: "Allow"
                Action:
                  - "ssm:GetParameter"
                Resource: !Sub "arn:${AWS::Partition}:ssm:${AWS::Region}:${AWS::AccountId}:parameter/vpconnect-{{.Name}}-cwAgentConf"

        {{.KmsString}}

        - PolicyName: "eip"
          PolicyDocument:
            Statement:
              - Effect: "Allow"
                Action:
                  - "ec2:DescribeAddresses"
                  - "ec2:AllocateAddress"
                  - "ec2:DescribeInstances"
                  - "ec2:AssociateAddress"
                  - "ec2:DisassociateAddress"
                  - "ec2:ReleaseAddress"
                  - "ec2:AttachNetworkInterface"
                  - "ec2:DescribeNetworkInterfaceAttribute"
                  - "ec2:DetachNetworkInterface"
                Resource: "*"


###########
# ALARMS #
##########
  VpnCpuAlarm:
    Type: "AWS::CloudWatch::Alarm"
    Properties:
      AlarmDescription: "vpconnect-{{.Name}} cpu alarm"
      AlarmActions:
        - "{{.Ecs.AlarmSnsArn}}"
      OKActions:
        - "{{.Ecs.AlarmSnsArn}}"
      MetricName: "CPUUtilization"
      Namespace: "AWS/EC2"
      Statistic: "Average"
      Period: "60"
      EvaluationPeriods: "3"
      Threshold: "90"
      ComparisonOperator: "GreaterThanThreshold"
      Dimensions:
        - Name: "AutoScalingGroupName"
          Value: !Ref "VpnEcsAutoScalingGroup"


  VpnMemoryAlarm:
    Type: "AWS::CloudWatch::Alarm"
    Properties:
      AlarmDescription: "vpconnect-{{.Name}} memory alarm"
      AlarmActions:
        - "{{.Ecs.AlarmSnsArn}}"
      OKActions:
        - "{{.Ecs.AlarmSnsArn}}"
      MetricName: "mem_used_percent"
      Namespace: "CWAgent"
      Statistic: "Average"
      Period: "60"
      EvaluationPeriods: "3"
      Threshold: "95"
      ComparisonOperator: "GreaterThanThreshold"
      Dimensions:
        - Name: "AutoScalingGroupName"
          Value: !Ref "VpnEcsAutoScalingGroup"


  VpnSwapAlarm:
    Type: "AWS::CloudWatch::Alarm"
    Properties:
      AlarmDescription: "vpconnect-{{.Name}} swap alarm"
      AlarmActions:
        - "{{.Ecs.AlarmSnsArn}}"
      OKActions:
        - "{{.Ecs.AlarmSnsArn}}"
      MetricName: "swap_used_percent"
      Namespace: "CWAgent"
      Statistic: "Average"
      Period: "60"
      EvaluationPeriods: "3"
      Threshold: "50"
      ComparisonOperator: "GreaterThanThreshold"
      Dimensions:
        - Name: "AutoScalingGroupName"
          Value: !Ref "VpnEcsAutoScalingGroup"


  VpnDiskAlarm:
    Type: "AWS::CloudWatch::Alarm"
    Properties:
      AlarmDescription: "vpconnect-{{.Name}} disk alarm"
      AlarmActions:
        - "{{.Ecs.AlarmSnsArn}}"
      OKActions:
        - "{{.Ecs.AlarmSnsArn}}"
      MetricName: "disk_used_percent"
      Namespace: "CWAgent"
      Statistic: "Average"
      Period: "60"
      EvaluationPeriods: "3"
      Threshold: "90"
      ComparisonOperator: "GreaterThanThreshold"
      Dimensions:
        - Name: "AutoScalingGroupName"
          Value: !Ref "VpnEcsAutoScalingGroup"
        - Name: "device"
          Value: "xvda1"
        - Name: "path"
          Value: "/"
        - Name: "fstype"
          Value: "ext4"


  VpnStatusCheckAlarm:
    Type: "AWS::CloudWatch::Alarm"
    Properties:
      AlarmDescription: "vpconnect-{{.Name}} status check alarm"
      AlarmActions:
        - "{{.Ecs.AlarmSnsArn}}"
      OKActions:
        - "{{.Ecs.AlarmSnsArn}}"
      MetricName: "StatusCheckFailed"
      Namespace: "AWS/EC2"
      Statistic: "Average"
      Period: "60"
      EvaluationPeriods: "3"
      Threshold: "1"
      ComparisonOperator: "GreaterThanThreshold"
      Dimensions:
        - Name: "AutoScalingGroupName"
          Value: !Ref "VpnEcsAutoScalingGroup"


#######################
# ECS TASK DEFINITION #
#######################
# All forwards will be sent as a base64 yaml representation in the FORWARDS env var.
# This so the vpconnect program can parse it easily. If you want to debug the values
# please just run 'base64 --decode FORWARDS_BASE64_VALUE' to get the YAML.
# The task definition will run in host mode and in privileged mode.
# We will mount /lib/modules and /var/log.
  VpnEcsTaskDefinition:
    Type: "AWS::ECS::TaskDefinition"
    DependsOn:
      - "VpnElasticIp"
    Properties: 
      Family: "vpconnect-{{.Name}}"

      NetworkMode: "host"
      Volumes:
        - Name: "modules"
          Host: 
            SourcePath: "/lib/modules"
        - Name: "logs"
          Host:
            SourcePath: "/var/log/vpconnect-logs"

      ContainerDefinitions:
        - Name: "vpconnect-{{.Name}}"
          Image: "{{.Ecs.DockerImage}}"
          Memory: "{{.Ecs.Memory}}"
          Privileged: true
          LogConfiguration:
            LogDriver: "awslogs"
            Options:
              awslogs-group: !Ref "VpnLogGroupVpconnect"
              awslogs-region: !Ref "AWS::Region"

          Environment:
            - Name: "REGION"
              Value: !Sub "${AWS::Region}"
            - Name: "KMS_REGION"
              Value: !Select [ 3, !Split [ ":", "{{.Ecs.KmsKeyArn}}" ] ]
            - Name: "DEBUG"
              Value: "{{.Debug}}"
            - Name: "ELASTIC_IP"
              Value: !Ref "VpnElasticIp"

            # This value should be base64 encoded yaml data that will
            # be parsed by the vpconnect program.
            - Name: "CONFIG"
              Value: "{{.ConfigString}}"

          MountPoints:
            - SourceVolume: "modules"
              ContainerPath: "/lib/modules"
            - SourceVolume: "logs"
              ContainerPath: "/var/log"


###############
# ECS SERVICE #
###############
  VpnEcsService:
    Type: "AWS::ECS::Service"
    DependsOn:
      - "VpnEcsTaskDefinition"
      - "VpnEcsCluster"
    Properties: 
      Cluster: !Ref "VpnEcsCluster"
      DesiredCount: "1"
      LaunchType: "EC2"
      ServiceName: "vpconnect-{{.Name}}"
      TaskDefinition: !Ref "VpnEcsTaskDefinition"
      DeploymentConfiguration:
        MaximumPercent: 100
        MinimumHealthyPercent: 0


#################
# CWL LOG GROUP #
#################
# Create all log groups, so that they are deleted when the stack is deleted.
# Set retention to 90 days.
  VpnLogGroupSecure:
    Type: "AWS::Logs::LogGroup"
    Properties: 
      LogGroupName: "/vpconnect/{{.Name}}/secure"
      RetentionInDays: 90

  VpnLogGroupDmseg:
    Type: "AWS::Logs::LogGroup"
    Properties: 
      LogGroupName: "/vpconnect/{{.Name}}/dmesg"
      RetentionInDays: 90

  VpnLogGroupMessages:
    Type: "AWS::Logs::LogGroup"
    Properties: 
      LogGroupName: "/vpconnect/{{.Name}}/messages"
      RetentionInDays: 90

  VpnLogGroupDocker:
    Type: "AWS::Logs::LogGroup"
    Properties: 
      LogGroupName: "/vpconnect/{{.Name}}/docker"
      RetentionInDays: 90

  VpnLogGroupEcsInit:
    Type: "AWS::Logs::LogGroup"
    Properties: 
      LogGroupName: "/vpconnect/{{.Name}}/ecs-init"
      RetentionInDays: 90

  VpnLogGroupEcsAgent:
    Type: "AWS::Logs::LogGroup"
    Properties: 
      LogGroupName: "/vpconnect/{{.Name}}/ecs-agent"
      RetentionInDays: 90

  VpnLogGroupEcsAudit:
    Type: "AWS::Logs::LogGroup"
    Properties: 
      LogGroupName: "/vpconnect/{{.Name}}/ecs-audit"
      RetentionInDays: 90

  VpnLogGroupIptables:
    Type: "AWS::Logs::LogGroup"
    Properties:
      LogGroupName: "/vpconnect/{{.Name}}/iptables"
      RetentionInDays: 90

  VpnLogGroupCharon:
    Type: "AWS::Logs::LogGroup"
    Properties: 
      LogGroupName: "/vpconnect/{{.Name}}/charon"
      RetentionInDays: 90

  VpnLogGroupVpconnect:
    Type: "AWS::Logs::LogGroup"
    Properties: 
      LogGroupName: "/vpconnect/{{.Name}}/vpconnect"
      RetentionInDays: 90


######################
# ELASTIC IP ADDRESS #
######################
# This is the external static ip that will be used for all IPSEC traffic.
  VpnElasticIp:
    Type: "AWS::EC2::EIP"
    Properties:
      Domain: "{{.Network.VpcId}}"


#############################
# ELASTIC NETWORK INTERFACE #
#############################
# This is the secondary network interface that is used for all IPSEC traffic.
  VpnElasticNetworkInterface:
    Type: "AWS::EC2::NetworkInterface"
    Properties:
      Description: "vpconnect-{{.Name}}"
      SourceDestCheck: "false"
      SubnetId: "{{.Network.PublicSubnetId}}"
      GroupSet:
        - !Ref "VpnSecurityGroupNetworkInterface"


#####################################
# CLOUDWATCH AGENT CONFIG PARAMETER #
#####################################
# Cloudwatch Agent config stored in SSM Parameter store.
  VpnCloudWatchAgentConfig:
    Type: "AWS::SSM::Parameter"
    Properties:
      Name: "vpconnect-{{.Name}}-cwAgentConf"
      Type: "String"
      Description: "vpconnect-{{.Name}} CloudWatch Agent Config"
      Value: '{"metrics":{"append_dimensions":{"AutoScalingGroupName":"${aws:AutoScalingGroupName}"},"metrics_collected":{"cpu":{"measurement":["cpu_usage_idle","cpu_usage_iowait","cpu_usage_user","cpu_usage_system"],"metrics_collection_interval":120,"resources":["*"],"totalcpu":false},"disk":{"measurement":["used_percent","inodes_free"],"metrics_collection_interval":120,"resources":["*"]},"diskio":{"measurement":["io_time","write_bytes","read_bytes","writes","reads"],"metrics_collection_interval":120,"resources":["*"]},"mem":{"measurement":["mem_used_percent"],"metrics_collection_interval":120},"netstat":{"measurement":["tcp_established","tcp_time_wait"],"metrics_collection_interval":120},"swap":{"measurement":["swap_used_percent"],"metrics_collection_interval":120}}}}'


Outputs:
  ElasticIP:
    Description: "Elastic IP"
    Value: !Ref "VpnElasticIp"

  ElasticNetworkInterface:
    Description: "Elastic Network Interface"
    Value: !Ref "VpnElasticNetworkInterface"
